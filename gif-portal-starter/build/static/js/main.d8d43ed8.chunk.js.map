{"version":3,"sources":["assets/twitter-logo.svg","App.js","index.js"],"names":["TWITTER_HANDLE","TWITTER_LINK","SystemProgram","web3","arr","Object","values","kp","_keypair","secretKey","secret","Uint8Array","baseAccount","Keypair","fromSecretKey","programID","PublicKey","idl","metadata","address","network","clusterApiUrl","opts","App","useState","walletAddress","setWalletAddress","inputValue","setInputValue","gifList","setGifList","checkIfWalletIsConnected","a","window","solana","isPhantom","console","log","connect","onlyIfTrusted","response","publicKey","toString","alert","error","getProvider","connection","Connection","Provider","connectWallet","onInputChange","event","value","target","sendGif","length","provider","program","Program","rpc","addGif","accounts","user","wallet","getGifList","createGifAccount","startStuffOff","systemProgram","programId","signers","account","fetch","useEffect","onLoad","addEventListener","removeEventListener","className","onClick","onSubmit","preventDefault","type","placeholder","onChange","map","item","index","src","gifLink","alt","twitterLogo","href","rel","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"svCAAe,MAA0B,yC,iBCSnCA,EAAiB,YACjBC,EAAY,8BAA0BD,GAGpCE,EAAkBC,IAAlBD,cAEFE,EAAMC,OAAOC,OAAOC,EAAGC,SAASC,WAChCC,EAAS,IAAIC,WAAWP,GACxBQ,EAAcT,IAAKU,QAAQC,cAAcJ,GAEzCK,EAAY,IAAIC,YAAUC,EAAIC,SAASC,SAEvCC,EAAUC,wBAAc,UAExBC,EACiB,YAwNRC,EArNH,WACV,MAA0CC,mBAAS,MAAnD,mBAAOC,EAAP,KAAsBC,EAAtB,KACA,EAAoCF,mBAAS,IAA7C,mBAAOG,EAAP,KAAmBC,EAAnB,KACA,EAA8BJ,mBAAS,IAAvC,mBAAOK,EAAP,KAAgBC,EAAhB,KAIMC,EAAwB,uCAAG,gCAAAC,EAAA,oEAEVC,SAAXC,EAFqB,EAErBA,QAFqB,qBAIxBA,EAAOC,UAJiB,wBAKzBC,QAAQC,IAAI,KALa,SAMFH,EAAOI,QAAQ,CAACC,eAAe,IAN7B,OAMnBC,EANmB,OAOzBJ,QAAQC,IAAI,eAAgBG,EAASC,UAAUC,YAC/ChB,EAAiBc,EAASC,UAAUC,YARX,gCAW3BC,MAAM,OAXqB,0DAc7BP,QAAQQ,MAAR,MAd6B,0DAAH,qDAkBxBC,EAAc,WAClB,IAAMC,EAAa,IAAIC,aAAW3B,EAASE,GAI3C,OAHiB,IAAI0B,IACnBF,EAAYb,OAAOC,OAAQZ,IAKzB2B,EAAa,uCAAG,gCAAAjB,EAAA,2DACDC,SAAXC,EADY,EACZA,QADY,gCAIKA,EAAOI,UAJZ,OAIZE,EAJY,OAKlBJ,QAAQC,IAAI,6BAA8BG,EAASC,UAAUC,YAC7DhB,EAAiBc,EAASC,UAAUC,YANlB,2CAAH,qDAUbQ,EAAgB,SAACC,GACrB,IAAQC,EAAUD,EAAME,OAAhBD,MACRxB,EAAcwB,IAGVE,EAAO,uCAAG,8BAAAtB,EAAA,yDACW,IAAtBL,EAAW4B,OADA,uBAEZnB,QAAQC,IAAI,sBAFA,iCAKdD,QAAQC,IAAI,aAAcV,GALZ,SAON6B,EAAWX,IACXY,EAAU,IAAIC,IAAQzC,EAAKF,EAAWyC,GARhC,SAUNC,EAAQE,IAAIC,OAAOjC,EAAY,CACnCkC,SAAU,CACRjD,YAAaA,EAAY6B,UACzBqB,KAAMN,EAASO,OAAOtB,aAbd,cAgBZL,QAAQC,IAAI,qCAAsCV,GAhBtC,UAiBNqC,IAjBM,0DAmBZ5B,QAAQQ,MAAM,yBAAd,MAnBY,0DAAH,qDA6EPqB,EAAgB,uCAAG,8BAAAjC,EAAA,sEAEfwB,EAAWX,IACXY,EAAU,IAAIC,IAAQzC,EAAKF,EAAWyC,GAC5CpB,QAAQC,IAAI,sBAJS,SAKfoB,EAAQE,IAAIO,cAAc,CAC9BL,SAAU,CACRjD,YAAaA,EAAY6B,UACzBqB,KAAMN,EAASO,OAAOtB,UACtB0B,cAAejE,EAAckE,WAE/BC,QAAS,CAACzD,KAXS,cAarBwB,QAAQC,IAAI,0CAA2CzB,EAAY6B,UAAUC,YAbxD,SAcfsB,IAde,yDAgBrB5B,QAAQC,IAAI,+BAAZ,MAhBqB,0DAAH,qDAoBhB2B,EAAU,uCAAG,gCAAAhC,EAAA,sEAETwB,EAAWX,IACXY,EAAU,IAAIC,IAAQzC,EAAKF,EAAWyC,GAH7B,SAIOC,EAAQa,QAAQ1D,YAAY2D,MAAM3D,EAAY6B,WAJrD,OAIT6B,EAJS,OAMflC,QAAQC,IAAI,kBAAmBiC,GAC/BxC,EAAWwC,EAAQzC,SAPJ,kDASfO,QAAQC,IAAI,qBAAZ,MACAP,EAAW,MAVI,0DAAH,qDAuChB,OAxBA0C,qBAAU,WACR,IAAMC,EAAM,uCAAG,sBAAAzC,EAAA,sEACPD,IADO,2CAAH,qDAIZ,OADAE,OAAOyC,iBAAiB,OAAQD,GACzB,kBAAMxC,OAAO0C,oBAAoB,OAAQF,MAChD,IAEFD,qBAAU,WACR,IAAMC,EAAM,uCAAG,sBAAAzC,EAAA,sEACPD,IADO,2CAAH,qDAIZ,OADAE,OAAOyC,iBAAiB,OAAQD,GACzB,kBAAMxC,OAAO0C,oBAAoB,OAAQF,MAC/C,IAEHD,qBAAU,WACJ/C,IACFW,QAAQC,IAAI,wBAEZ2B,OAED,CAACvC,IAGF,qBAAKmD,UAAU,MAAf,SAED,sBAAKA,UAAWnD,EAAgB,mBAAqB,YAArD,UACK,sBAAKmD,UAAU,mBAAf,UACE,mBAAGA,UAAU,SAAb,qCACA,mBAAGA,UAAU,WAAb,+DAKEnD,GAxHR,wBACEmD,UAAU,mCACVC,QAAS5B,EAFX,+BA0HKxB,IAjHW,OAAZI,EAEA,qBAAK+C,UAAU,sBAAf,SACE,wBAAQA,UAAU,+BAA+BC,QAASZ,EAA1D,iEAQF,sBAAKW,UAAU,sBAAf,UACA,uBACEE,SAAU,SAAC3B,GACTA,EAAM4B,iBACNzB,KAHJ,UAME,uBACE0B,KAAK,OACLC,YAAY,kBACZ7B,MAAOzB,EACPuD,SAAUhC,IAEZ,wBAAQ8B,KAAK,SAASJ,UAAU,+BAAhC,uBAIF,qBAAKA,UAAU,WAAf,SAEG/C,EAAQsD,KAAI,SAACC,EAAMC,GAAP,OACX,qBAAKT,UAAU,WAAf,SACE,qBAAKU,IAAKF,EAAKG,WADcF,eAoFnC,sBAAKT,UAAU,mBAAf,UACE,qBAAKY,IAAI,eAAeZ,UAAU,eAAeU,IAAKG,IACtD,mBACEb,UAAU,cACVc,KAAMzF,EACNoD,OAAO,SACPsC,IAAI,aAJN,6BAKe3F,cCpOzB4F,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,U","file":"static/js/main.d8d43ed8.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/twitter-logo.d89d9a86.svg\";","import { useEffect, useState } from 'react';\nimport {Program, Provider, web3} from '@project-serum/anchor';\nimport { Connection, PublicKey, clusterApiUrl} from '@solana/web3.js';\nimport idl from './idl.json';\nimport kp from './keypair.json';\nimport twitterLogo from './assets/twitter-logo.svg';\nimport './App.css';\n\n// Constants\nconst TWITTER_HANDLE = 'itsTayyab';\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\n\n\nconst { SystemProgram } = web3;\n\nconst arr = Object.values(kp._keypair.secretKey);\nconst secret = new Uint8Array(arr);\nconst baseAccount = web3.Keypair.fromSecretKey(secret);\n\nconst programID = new PublicKey(idl.metadata.address);\n\nconst network = clusterApiUrl('devnet')\n\nconst opts = {\n  preflightCommitment: \"processed\"\n}\n\nconst App = () => {\n  const [walletAddress, setWalletAddress] = useState(null);\n  const [inputValue, setInputValue] = useState('');\n  const [gifList, setGifList] = useState([]);\n\n\n  //Check Wallet Connect Status\n  const checkIfWalletIsConnected = async() => {\n    try {\n      const { solana } = window;\n      if (solana) {\n        if(solana.isPhantom) {\n          console.log('h')\n          const response = await solana.connect({onlyIfTrusted: true});\n          console.log(\"Public Key: \", response.publicKey.toString())\n          setWalletAddress(response.publicKey.toString());\n        }\n      } else {\n        alert('nah')\n      }\n    } catch(err) {\n      console.error(err);\n    }\n  }\n\n  const getProvider = () => {\n    const connection = new Connection(network, opts.preflightCommitment);\n    const provider = new Provider(\n      connection, window.solana, opts.preflightCommitment\n    );\n    return provider;\n  }\n\n  const connectWallet = async () => {\n    const { solana } = window;\n  \n    if (solana) {\n      const response = await solana.connect();\n      console.log('Connected with Public Key:', response.publicKey.toString());\n      setWalletAddress(response.publicKey.toString());\n    }\n  };\n\n  const onInputChange = (event) => {\n    const { value } = event.target;\n    setInputValue(value);\n  };\n\n  const sendGif = async () => {\n    if(inputValue.length === 0) {\n      console.log('No gif link given!');\n      return;\n    }\n    console.log(\"Gif Link: \", inputValue);\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n\n      await program.rpc.addGif(inputValue, {\n        accounts: {\n          baseAccount: baseAccount.publicKey,\n          user: provider.wallet.publicKey\n        }\n      });\n      console.log('GIF successfully sent to Program: ', inputValue);\n      await getGifList();\n    } catch(err) {\n      console.error(\"Error in sending GIF: \", err);\n    }\n  };\n  /*\n   * We want to render this UI when the user hasn't connected\n   * their wallet to our app yet.\n   */\n  const renderNotConnectedContainer = () => (\n    <button\n      className=\"cta-button connect-wallet-button\"\n      onClick={connectWallet}\n    >\n      Connect to Wallet\n    </button>\n  );\n  \n  const renderConnectedContainer = () => {\n    if (gifList === null) {\n      return (\n        <div className='connected-container'>\n          <button className=\"cta-button submit-gif-button\" onClick={createGifAccount}>\n            Do One-Time Initilization for GIF Program Account\n          </button>\n        </div>\n      )\n    }\n    else {\n      return (\n        <div className=\"connected-container\">\n        <form\n          onSubmit={(event) => {\n            event.preventDefault();\n            sendGif();\n          }}\n        >\n          <input\n            type=\"text\"\n            placeholder=\"Enter gif link!\"\n            value={inputValue}\n            onChange={onInputChange}\n          />\n          <button type=\"submit\" className=\"cta-button submit-gif-button\">\n            Submit\n          </button>\n        </form>\n        <div className=\"gif-grid\">\n\t\t\t\t\t{/* We use index as the key instead, also, the src is now item.gifLink */}\n          {gifList.map((item, index) => (\n            <div className=\"gif-item\" key={index}>\n              <img src={item.gifLink} />\n            </div>\n          ))}\n        </div>\n      </div>\n      )\n    }\n  };\n\n  const createGifAccount = async() => {\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n      console.log(\"Performing ping...\")\n      await program.rpc.startStuffOff({\n        accounts: {\n          baseAccount: baseAccount.publicKey,\n          user: provider.wallet.publicKey,\n          systemProgram: SystemProgram.programId\n        },\n        signers: [baseAccount]\n      });\n      console.log(\"Create a new BaseAccount with address: \", baseAccount.publicKey.toString());\n      await getGifList();\n    } catch(err) {\n      console.log(\"Error creating BaseAccount: \", err);\n    }\n  }\n\n  const getGifList = async() => {\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider)\n      const account = await program.account.baseAccount.fetch(baseAccount.publicKey);\n\n      console.log(\"Got the account\", account);\n      setGifList(account.gifList)\n    } catch (err) {\n      console.log(\"Error in getGifs: \", err);\n      setGifList(null);\n    }\n  }\n\n  //Use effect for wallet check\n  useEffect(() => {\n    const onLoad = async() => {\n      await checkIfWalletIsConnected();\n    }\n    window.addEventListener('load', onLoad);\n    return () => window.removeEventListener('load', onLoad);\n  },[]);\n\n  useEffect(() => {\n    const onLoad = async () => {\n      await checkIfWalletIsConnected();\n    };\n    window.addEventListener('load', onLoad);\n    return () => window.removeEventListener('load', onLoad);\n  }, []);\n  \n  useEffect(() => {\n    if (walletAddress) {\n      console.log('Fetching GIF list...');\n      \n      getGifList();\n    }\n  }, [walletAddress]);\n\n  return (\n    <div className=\"App\">\n      {/* This was solely added for some styling fanciness */}\n\t\t\t<div className={walletAddress ? 'authed-container' : 'container'}>\n        <div className=\"header-container\">\n          <p className=\"header\">🖼 GIF Portal</p>\n          <p className=\"sub-text\">\n            View your GIF collection in the metaverse ✨\n          </p>\n          \n          {/* Add the condition to show this only if we don't have a wallet address */}\n          {!walletAddress && renderNotConnectedContainer()}\n          {/* We just need to add the inverse here! */}\n        {walletAddress && renderConnectedContainer()}\n        </div>\n        <div className=\"footer-container\">\n          <img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} />\n          <a\n            className=\"footer-text\"\n            href={TWITTER_LINK}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >{`built on @${TWITTER_HANDLE}`}</a>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}